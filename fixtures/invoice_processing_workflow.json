{
  "name": "Invoice Processing - IDOM",
  "description": "Procesa facturas desde email: lee PDFs, extrae importes, guarda en BD o rechaza",
  "nodes": [
    {
      "id": "start",
      "type": "start",
      "label": "Inicio"
    },
    {
      "id": "read_emails",
      "type": "action",
      "label": "Leer Emails",
      "code": "import imaplib\nimport email\nfrom email.header import decode_header\nfrom src.models.credentials import get_email_credentials\n\n# Get email credentials\nemail_creds = get_email_credentials(context['client_slug'])\n\n# Connect to IMAP\nmail = imaplib.IMAP4_SSL(email_creds.imap_host, email_creds.imap_port)\nmail.login(email_creds.email_user, email_creds.email_password)\nmail.select('INBOX')\n\n# Search for unread emails\nstatus, messages = mail.search(None, 'UNSEEN')\nemail_ids = messages[0].split()\n\nif not email_ids:\n    context['has_emails'] = False\n    context['emails'] = []\n    mail.logout()\nelse:\n    # Read first unread email\n    email_id = email_ids[0]\n    status, msg_data = mail.fetch(email_id, '(RFC822)')\n    \n    msg = email.message_from_bytes(msg_data[0][1])\n    \n    # Parse email\n    from_header = msg.get('From', '')\n    subject = msg.get('Subject', '')\n    date = msg.get('Date', '')\n    \n    # Store email info\n    context['has_emails'] = True\n    context['current_email_id'] = email_id.decode()\n    context['email_from'] = from_header\n    context['email_subject'] = subject\n    context['email_date'] = date\n    context['email_message'] = msg\n    \n    # Check whitelist\n    if email_creds.sender_whitelist:\n        sender_email = from_header.split('<')[-1].strip('>')\n        if email_creds.sender_whitelist not in sender_email:\n            context['passes_whitelist'] = False\n        else:\n            context['passes_whitelist'] = True\n    else:\n        context['passes_whitelist'] = True\n    \n    # Don't logout yet, we need to mark as read later\n    context['imap_connection'] = mail",
      "executor": "e2b",
      "timeout": 30
    },
    {
      "id": "check_pdf",
      "type": "action",
      "label": "Verificar PDF",
      "code": "import email\n\nif not context.get('has_emails') or not context.get('passes_whitelist'):\n    context['has_pdf'] = False\n    context['pdf_data'] = None\n    context['pdf_filename'] = None\nelse:\n    msg = context['email_message']\n    has_pdf = False\n    pdf_data = None\n    pdf_filename = None\n    \n    # Check attachments\n    for part in msg.walk():\n        if part.get_content_maintype() == 'multipart':\n            continue\n        if part.get('Content-Disposition') is None:\n            continue\n        \n        filename = part.get_filename()\n        if filename and filename.lower().endswith('.pdf'):\n            has_pdf = True\n            pdf_data = part.get_payload(decode=True)\n            pdf_filename = filename\n            break\n    \n    context['has_pdf'] = has_pdf\n    context['pdf_data'] = pdf_data\n    context['pdf_filename'] = pdf_filename",
      "executor": "e2b",
      "timeout": 10
    },
    {
      "id": "has_pdf_decision",
      "type": "decision",
      "label": "¿Tiene PDF?",
      "code": "# Decision: Has PDF attachment?\nhas_pdf = context.get('has_pdf', False)\ncontext['branch_decision'] = has_pdf",
      "timeout": 5
    },
    {
      "id": "send_rejection_no_pdf",
      "type": "action",
      "label": "Enviar Rechazo (Sin PDF)",
      "code": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom src.models.credentials import get_email_credentials\n\nemail_creds = get_email_credentials(context['client_slug'])\n\n# Create rejection email\nmsg = MIMEMultipart()\nmsg['From'] = email_creds.email_user\nmsg['To'] = context['email_from']\nmsg['Subject'] = f\"Re: {context['email_subject']} - Email Inválido\"\n\nbody = f\"\"\"Hola,\n\nHemos recibido tu email pero no contiene un archivo PDF adjunto.\n\nPor favor, reenvía el email con la factura en formato PDF.\n\nGracias,\nEquipo IDOM\n\"\"\"\n\nmsg.attach(MIMEText(body, 'plain'))\n\n# Send via SMTP\nsmtp = smtplib.SMTP(email_creds.smtp_host, email_creds.smtp_port)\nsmtp.starttls()\nsmtp.login(email_creds.email_user, email_creds.email_password)\nsmtp.send_message(msg)\nsmtp.quit()\n\n# Mark original email as read\nif 'imap_connection' in context:\n    mail = context['imap_connection']\n    mail.store(context['current_email_id'], '+FLAGS', '\\\\Seen')\n    mail.logout()\n\ncontext['rejection_sent'] = True",
      "executor": "e2b",
      "timeout": 20
    },
    {
      "id": "extract_pdf_text",
      "type": "action",
      "label": "Extraer Texto del PDF (OCR)",
      "code": "import fitz  # PyMuPDF\nimport io\n\npdf_data = context['pdf_data']\n\n# Open PDF from bytes\npdf_stream = io.BytesIO(pdf_data)\ndoc = fitz.open(stream=pdf_stream, filetype='pdf')\n\n# Extract text from all pages\nfull_text = ''\nfor page_num in range(len(doc)):\n    page = doc[page_num]\n    full_text += page.get_text()\n\ndoc.close()\n\ncontext['ocr_text'] = full_text\ncontext['ocr_method'] = 'pymupdf'\ncontext['pdf_size_bytes'] = len(pdf_data)",
      "executor": "e2b",
      "timeout": 30
    },
    {
      "id": "find_total_amount",
      "type": "action",
      "label": "Encontrar Importe Total",
      "code": "import re\n\nocr_text = context['ocr_text']\n\n# Regex patterns to find amounts\npatterns = [\n    r'total[:\\s]+€?\\s*(\\d+[.,]\\d{2})',\n    r'importe[:\\s]+€?\\s*(\\d+[.,]\\d{2})',\n    r'amount[:\\s]+€?\\s*(\\d+[.,]\\d{2})',\n    r'€\\s*(\\d+[.,]\\d{2})',\n]\n\namount_found = None\nfor pattern in patterns:\n    matches = re.findall(pattern, ocr_text, re.IGNORECASE)\n    if matches:\n        # Take the last match (usually the total)\n        amount_str = matches[-1].replace(',', '.')\n        amount_found = float(amount_str)\n        break\n\nif amount_found is None:\n    # Fallback: find any number with 2 decimals\n    matches = re.findall(r'(\\d+[.,]\\d{2})', ocr_text)\n    if matches:\n        amount_str = matches[-1].replace(',', '.')\n        amount_found = float(amount_str)\n\ncontext['total_amount'] = amount_found or 0.0\ncontext['currency'] = 'EUR'",
      "executor": "e2b",
      "timeout": 10
    },
    {
      "id": "amount_threshold_decision",
      "type": "decision",
      "label": "¿Importe > €1000?",
      "code": "# Decision: Amount exceeds threshold?\namount = context.get('total_amount', 0)\nthreshold = 1000\n\nexceeds_threshold = amount > threshold\ncontext['branch_decision'] = exceeds_threshold",
      "timeout": 5
    },
    {
      "id": "send_budget_high_email",
      "type": "action",
      "label": "Enviar Email (Presupuesto Alto)",
      "code": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom src.models.credentials import get_email_credentials\n\nemail_creds = get_email_credentials(context['client_slug'])\n\namount = context['total_amount']\n\n# Create high budget email\nmsg = MIMEMultipart()\nmsg['From'] = email_creds.email_user\nmsg['To'] = context['email_from']\nmsg['Subject'] = f\"Re: {context['email_subject']} - Presupuesto Elevado\"\n\nbody = f\"\"\"Hola,\n\nHemos recibido tu factura por un importe de €{amount:.2f}.\n\nEste importe supera el límite de aprobación automática (€1000).\n\nUn miembro de nuestro equipo revisará la factura y te contactará pronto.\n\nGracias,\nEquipo IDOM\n\"\"\"\n\nmsg.attach(MIMEText(body, 'plain'))\n\n# Send via SMTP\nsmtp = smtplib.SMTP(email_creds.smtp_host, email_creds.smtp_port)\nsmtp.starttls()\nsmtp.login(email_creds.email_user, email_creds.email_password)\nsmtp.send_message(msg)\nsmtp.quit()\n\n# Mark original email as read\nif 'imap_connection' in context:\n    mail = context['imap_connection']\n    mail.store(context['current_email_id'], '+FLAGS', '\\\\Seen')\n    mail.logout()\n\ncontext['high_budget_email_sent'] = True",
      "executor": "e2b",
      "timeout": 20
    },
    {
      "id": "save_to_database",
      "type": "action",
      "label": "Guardar en Base de Datos",
      "code": "from src.models.credentials import get_database_connection\n\n# Connect to client database\nconn = get_database_connection(context['client_slug'])\ncursor = conn.cursor()\n\n# Insert invoice\ncursor.execute(\"\"\"\n    INSERT INTO invoices (\n        email_from, email_subject, email_date,\n        pdf_filename, pdf_content, pdf_size_bytes,\n        ocr_text, ocr_method,\n        total_amount, currency,\n        processed_by_workflow_id, processed_by_execution_id\n    ) VALUES (\n        %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s\n    ) RETURNING id\n\"\"\", (\n    context['email_from'],\n    context['email_subject'],\n    context.get('email_date'),\n    context['pdf_filename'],\n    context['pdf_data'],\n    context['pdf_size_bytes'],\n    context['ocr_text'],\n    context['ocr_method'],\n    context['total_amount'],\n    context['currency'],\n    context.get('workflow_id'),\n    context.get('execution_id')\n))\n\ninvoice_id = cursor.fetchone()[0]\nconn.commit()\n\ncursor.close()\nconn.close()\n\n# Mark email as read\nif 'imap_connection' in context:\n    mail = context['imap_connection']\n    mail.store(context['current_email_id'], '+FLAGS', '\\\\Seen')\n    mail.logout()\n\ncontext['invoice_id'] = invoice_id\ncontext['invoice_saved'] = True",
      "executor": "e2b",
      "timeout": 30
    },
    {
      "id": "end",
      "type": "end",
      "label": "Fin"
    }
  ],
  "edges": [
    {"from": "start", "to": "read_emails"},
    {"from": "read_emails", "to": "check_pdf"},
    {"from": "check_pdf", "to": "has_pdf_decision"},
    {"from": "has_pdf_decision", "to": "send_rejection_no_pdf", "condition": "false"},
    {"from": "has_pdf_decision", "to": "extract_pdf_text", "condition": "true"},
    {"from": "send_rejection_no_pdf", "to": "end"},
    {"from": "extract_pdf_text", "to": "find_total_amount"},
    {"from": "find_total_amount", "to": "amount_threshold_decision"},
    {"from": "amount_threshold_decision", "to": "send_budget_high_email", "condition": "true"},
    {"from": "amount_threshold_decision", "to": "save_to_database", "condition": "false"},
    {"from": "send_budget_high_email", "to": "end"},
    {"from": "save_to_database", "to": "end"}
  ]
}
